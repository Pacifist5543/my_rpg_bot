from boost import Boost
from database import Session, User
import random
from telebot import types
from telebot import TeleBot, types
TOKEN = "7676744631:AAE8xq355W1p3yXrHVn-p4jkL6MUzkjcBDQ"
bot = TeleBot(TOKEN)


def calc_fight_result(enemy_damage, enemy_defence, enemy_hp, player_id, player_damage, player_defence, player_hp):
    session = Session()
    user = session.query(User).filter(User.user_id == player_id).first()

    boosts: list[Boost] = user.boosts

class BattleSystem:
    def __init__(self):
        self.min_accuracy = 30  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è
        self.max_accuracy = 95  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è
    
    def calculate_hit(self, attacker, defender):
        """–†–∞—Å—á–µ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∫–æ—Å—Ç–∏ –∏ —É–∫–ª–æ–Ω–µ–Ω–∏—è"""
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è (–º–µ—Ç–∫–æ—Å—Ç—å –∞—Ç–∞–∫—É—é—â–µ–≥–æ –º–∏–Ω—É—Å –ª–æ–≤–∫–æ—Å—Ç—å –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è)
        hit_chance = attacker['accuracy'] - defender['agility'] * 0.5
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è
        hit_chance = max(self.min_accuracy, min(self.max_accuracy, hit_chance))
        
        # –°–ª—É—á–∞–π–Ω—ã–π –±—Ä–æ—Å–æ–∫
        roll = random.randint(1, 100)
        return roll <= hit_chance
    
    def calculate_damage(self, attacker, defender):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –±—Ä–æ–Ω–∏"""
        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = attacker['attack']
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (5% —à–∞–Ω—Å)
        is_critical = random.randint(1, 100) <= 5
        if is_critical:
            base_damage *= 1.5  # +50% —É—Ä–æ–Ω–∞
        
        # –£—á–µ—Ç –±—Ä–æ–Ω–∏ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –±—Ä–æ–Ω–∏ —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ 1)
        armor_reduction = defender['armor']
        final_damage = max(1, base_damage - armor_reduction)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω - 1
        
        return final_damage, is_critical
    
    def battle_round(self, player, enemy):
        """–û–¥–∏–Ω —Ä–∞—É–Ω–¥ –±–æ—è"""
        results = []
        
        # –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        if self.calculate_hit(player, enemy):
            damage, is_critical = self.calculate_damage(player, enemy)
            enemy['health'] -= damage
            crit_text = " (–ö–†–ò–¢!)" if is_critical else ""
            results.append(f"‚úÖ –í—ã –ø–æ–ø–∞–ª–∏! –£—Ä–æ–Ω: {damage}{crit_text}")
        else:
            results.append("‚ùå –í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
        if enemy['health'] <= 0:
            results.append(f"‚ò†Ô∏è {enemy['name']} –ø–æ–≤–µ—Ä–∂–µ–Ω!")
            return results
        
        # –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
        if self.calculate_hit(enemy, player):
            damage, is_critical = self.calculate_damage(enemy, player)
            player['health'] -= damage
            crit_text = " (–ö–†–ò–¢!)" if is_critical else ""
            results.append(f"‚öîÔ∏è {enemy['name']} –∞—Ç–∞–∫—É–µ—Ç! –£—Ä–æ–Ω: {damage}{crit_text}")
        else:
            results.append(f"üõ°Ô∏è {enemy['name']} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!")
        
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
battle_system = BattleSystem()

@bot.callback_query_handler(func=lambda call: call.data == "start_battle")
def start_battle(callback):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ (–¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–∑ –ë–î)
    player = {
        'name': "–ò–≥—Ä–æ–∫",
        'health': 100,
        'attack': 15,
        'accuracy': 80,  # –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ %
        'agility': 10,   # –õ–æ–≤–∫–æ—Å—Ç—å (–≤–ª–∏—è–µ—Ç –Ω–∞ —É–∫–ª–æ–Ω–µ–Ω–∏–µ)
        'armor': 5       # –ë—Ä–æ–Ω—è (—Å–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω)
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemy = {
        'name': "–ì–æ–±–ª–∏–Ω",
        'health': 50,
        'attack': 10,
        'accuracy': 70,
        'agility': 15,
        'armor': 3
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—è
    battle_kb = types.InlineKeyboardMarkup()
    battle_kb.add(
        types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
        types.InlineKeyboardButton("–ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data="battle_defend"),
        types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="battle_flee")
    )
    
    bot.send_message(
        callback.message.chat.id,
        f"‚öîÔ∏è *–ë–æ–π —Å {enemy['name']}!*\n"
        f"–í–∞—à–µ HP: {player['health']} | –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {enemy['health']}",
        parse_mode="Markdown",
        reply_markup=battle_kb
    )

@bot.callback_query_handler(func=lambda call: call.data == "battle_attack")
def battle_attack(callback):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—è (–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –∫—ç—à–µ)
    player = {...}  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    enemy = {...}   # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞
    
    # –ü—Ä–æ–≤–æ–¥–∏–º —Ä–∞—É–Ω–¥ –±–æ—è
    battle_log = battle_system.battle_round(player, enemy)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "‚öîÔ∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞:*\n" + "\n".join(battle_log)
    message += f"\n\n–í–∞—à–µ HP: {player['health']} | {enemy['name']}: {enemy['health']}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –±–æ—è
    if enemy['health'] <= 0:
        message += "\n\nüéâ *–í—ã –ø–æ–±–µ–¥–∏–ª–∏!*"
        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ —Ç.–¥.
    elif player['health'] <= 0:
        message += "\n\nüíÄ *–í—ã –ø–æ–≥–∏–±–ª–∏...*"
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
        battle_kb = types.InlineKeyboardMarkup()
        battle_kb.add(
            types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
            types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ", callback_data="use_potion")
        )
        bot.edit_message_text(
            message,
            callback.message.chat.id,
            callback.message.message_id,
            reply_markup=battle_kb,
            parse_mode="Markdown"
        )
        return
    
    bot.edit_message_text(
        message,
        callback.message.chat.id,
        callback.message.message_id,
        parse_mode="Markdown"
    )


